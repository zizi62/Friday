{"version":3,"sources":["components/Header/header.module.css","components/common/Input/input.module.css","components/SignInPage/SignIn/signIn.module.css","components/common/Button/button.module.css","components/common/ErrorMessage/errorMessage.module.css","components/Main/main.module.css","components/common/Input/Input.tsx","components/common/Button/Button.tsx","components/RegistrationPage/Registration/Registration.tsx","components/RegistrationPage/Registration/RegistrationContainer.tsx","components/SetNewPasswordPage/SetNewPassword.tsx","components/SetNewPasswordPage/SetNewPasswordContainer.tsx","components/ForgotPasswordPage/ForgotPassword/ForgotPassword.tsx","components/ForgotPasswordPage/ForgotPassword/ForgotPasswordContainer.tsx","components/ForgotPasswordPage/ForgotPasswordPage.tsx","components/SignInPage/SignIn/SignIn.tsx","components/api/signInApi.ts","components/api/profileApi.ts","Redux/profileReducer.ts","Redux/signInReducer.ts","components/common/ErrorMessage/ErrorMessage.tsx","components/SignInPage/SignIn/SignInContainer.tsx","components/SignInPage/SignInPage.tsx","components/ProfilePage/Profile/Profile.tsx","components/ProfilePage/Profile/ProfileContainer.tsx","components/ProfilePage/ProfilePage.tsx","components/Routes/Routes.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Main/Main.tsx","Redux/forgotPasswordReducer.ts","Redux/registrationReducer.ts","Redux/setNewPasswordReducer.ts","Redux/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Input","props","onEnter","error","restProps","inputStyle","style","input","inputError","className","type","name","onKeyDown","e","charCode","Button","button","Registration","placeholder","to","SIGN_IN_PATH","RegistrationContainer","SetNewPassword","SetNewPasswordContainer","ForgotPassword","FORGOT_PASSWORD_PATH","ForgotPasswordContainer","ForgotPasswordPage","SignIn","email","password","rememberMe","setEmail","setPassword","setRememberMe","signIn","onChange","value","checked","onClick","REGISTER_PATH","instance","axios","create","baseURL","signInApi","post","profileApi","token","response","data","initialState","profile","setProfileSuccess","setError","isAuth","ErrorMessage","message","SignInContainer","authorisationError","useSelector","store","signInPage","useState","setEmailValue","setPasswordValue","setRememberMeValue","dispatch","useDispatch","useCallback","a","signInSuccess","currentTarget","wraper","SignInPage","PROFILE_PATH","Profile","ProfileContainer","useEffect","localStorage","getItem","success","ProfilePage","Routes","path","component","Header","header","link","HeaderContainer","Main","main","rootReducer","combineReducers","profilePage","state","action","forgotPasswordPage","registrationPage","setNewPasswordPage","createStore","applyMiddleware","thunkMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.04e48ce1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wraper\":\"header_wraper__UnVwf\",\"header\":\"header_header__1-L5A\",\"link\":\"header_link__14HVq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"input_input__k8J0Q\",\"inputError\":\"input_inputError__lV3v_\",\"error\":\"input_error__2bxGV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wraper\":\"signIn_wraper__20ITI\",\"signIn\":\"signIn_signIn__1mMsw\",\"form\":\"signIn_form__2Sh7y\",\"inputText\":\"signIn_inputText__2AuFx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__2xIPi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"errorMessage_error__33Qmr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"main_main__ZrJEr\"};","import React, { DetailedHTMLProps, InputHTMLAttributes } from 'react'\r\nimport style from './input.module.css'\r\n\r\n\r\ntype InputPropsType = {\r\n    onEnter?: () => void \r\n    error?: string\r\n}\r\n\r\nconst Input: React.FC<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> & InputPropsType> = (props: InputPropsType) => {\r\n\r\n    const { onEnter, error, ...restProps } = props\r\n\r\n    let inputStyle = error ? style.input + ' ' + style.inputError : style.input\r\n\r\n    const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) onEnter && onEnter();\r\n    }\r\n\r\n    return <div>\r\n        <input className={inputStyle} type='text' name='myInput' onKeyDown={onKeyPress}  {...restProps} />\r\n       {error? <span className={style.error}>{error}</span>: null} \r\n    </div>\r\n}\r\n\r\nexport default Input\r\n\r\n","import React, { DetailedHTMLProps, ButtonHTMLAttributes } from 'react'\r\nimport style from './button.module.css'\r\n\r\n\r\ntype ButtonPropsType = {\r\n  \r\n}\r\n\r\nconst Button:React.FC< DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>& ButtonPropsType> =(props: ButtonPropsType )=>{\r\n    \r\n    return <div>\r\n        <button className = {style.button} {...props} />\r\n    </div>\r\n} \r\n\r\nexport default Button\r\n\r\n","import React from 'react'\r\nimport Input from '../../common/Input/Input'\r\nimport Button from '../../common/Button/Button'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { SIGN_IN_PATH } from '../../Routes/Routes'\r\n\r\n\r\ntype RegistrationPropsType = {\r\n\r\n}\r\n\r\nconst Registration: React.FC<RegistrationPropsType> = () => {\r\n    return <div>\r\n        <Input placeholder='login' />\r\n        <Input type='password' placeholder='password' />\r\n        <Input type='password' placeholder='password' />\r\n        <Input type='checkbox' />\r\n        <Button>SIGN UP</Button>\r\n        <NavLink to={SIGN_IN_PATH}>SIGN IN</NavLink>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Registration","import React from 'react'\r\nimport Registration from './Registration'\r\n\r\n\r\ninterface IRegistrationContainerProps {\r\n\r\n}\r\n\r\nconst RegistrationContainer: React.FC<IRegistrationContainerProps> = ()=>{\r\n    return <div>\r\n         <h2>SIGN UP</h2> \r\n    <Registration/>\r\n</div>\r\n}\r\n\r\nexport default RegistrationContainer","import React from 'react'\r\nimport Input from '../common/Input/Input'\r\nimport Button from '../common/Button/Button'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { SIGN_IN_PATH } from '../Routes/Routes'\r\n\r\ntype SetNewPasswordPropsType = {\r\n\r\n}\r\n\r\nconst SetNewPassword: React.FC<SetNewPasswordPropsType> = () => {\r\n    return <div>\r\n        <Input type=\"password\" />\r\n        <Input />\r\n        <Button>SEND PASSWORD</Button>\r\n        <NavLink to={SIGN_IN_PATH}>SIGN IN</NavLink>\r\n\r\n    </div>\r\n}\r\n\r\nexport default SetNewPassword","import React from 'react'\r\nimport SetNewPassword from './SetNewPassword'\r\n\r\n\r\ntype SetNewPasswordContainerPropsType = {\r\n\r\n}\r\n\r\nconst SetNewPasswordContainer: React.FC<SetNewPasswordContainerPropsType> = ()=>{\r\n    return <div>\r\n        <h2>SET NEW PASSWORD</h2>\r\n    <SetNewPassword/>\r\n</div>\r\n}\r\n\r\nexport default SetNewPasswordContainer","import React from 'react'\r\nimport Input from '../../common/Input/Input'\r\nimport Button from '../../common/Button/Button'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { FORGOT_PASSWORD_PATH, SIGN_IN_PATH } from '../../Routes/Routes'\r\n\r\n\r\ninterface IForgotPasswordProps {\r\n\r\n}\r\n\r\nconst ForgotPassword: React.FC<IForgotPasswordProps> = ()=>{\r\n    return <div>\r\n       <Input type = 'email' placeholder = 'email'/>\r\n       <NavLink to={FORGOT_PASSWORD_PATH}> Forgot password?</NavLink>\r\n       <Button>SEND NEW PASSWORD</Button>\r\n       <NavLink to={SIGN_IN_PATH}>SIGN IN</NavLink>\r\n</div>\r\n}\r\n\r\nexport default ForgotPassword","import React from 'react'\r\nimport ForgotPassword from './ForgotPassword'\r\n\r\n\r\ninterface IForgotPasswordContainerProps {\r\n\r\n}\r\n\r\nconst ForgotPasswordContainer: React.FC<IForgotPasswordContainerProps> = () => {\r\n    return <div>\r\n        <h2>FORGOT PASSWORD</h2>\r\n        <ForgotPassword />\r\n    </div>\r\n}\r\n\r\nexport default ForgotPasswordContainer","import React from 'react'\r\nimport ForgotPasswordContainer from './ForgotPassword/ForgotPasswordContainer'\r\n\r\n\r\n\r\ninterface IForgotPasswordPageProps {\r\n\r\n}\r\n\r\nconst ForgotPasswordPage: React.FC<IForgotPasswordPageProps> = ()=>{\r\n    return <div>\r\n    <ForgotPasswordContainer/>\r\n</div>\r\n}\r\n\r\nexport default ForgotPasswordPage","import React, { useState, ChangeEvent } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport style from './signIn.module.css'\r\nimport Input from '../../common/Input/Input'\r\nimport Button from '../../common/Button/Button'\r\nimport {  REGISTER_PATH } from '../../Routes/Routes'\r\n\r\n\r\ntype SignInPropsType = {\r\n    email : string | undefined\r\n    password: string | undefined\r\n    rememberMe: boolean\r\n    error: string | undefined\r\n    setEmail : (e: ChangeEvent<HTMLInputElement>)=> void\r\n    setPassword : (e: ChangeEvent<HTMLInputElement>)=>void\r\n    setRememberMe : (e: ChangeEvent<HTMLInputElement>)=> void\r\n    signIn:() => void\r\n}\r\n\r\n\r\nconst SignIn: React.FC<SignInPropsType> = (props) => {\r\n\r\nconst {email, password, rememberMe,error, setEmail, setPassword, setRememberMe, signIn} = props\r\n\r\n    return <div className={style.signIn}>\r\n        <Input placeholder='email' type = 'email' onChange ={setEmail} value={email} error={error}/>\r\n        <Input type = 'password'  placeholder='password' onChange ={setPassword} value={password} error={error}/>\r\n        <Input type = 'checkbox' onChange ={setRememberMe} checked={rememberMe}/>  \r\n        <span>Remember Me</span>\r\n        <Button onClick = {signIn}>SIGN IN</Button>\r\n        <NavLink to={REGISTER_PATH}>Registration</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default SignIn","import axios from \"axios\";\r\nimport { ProfileType } from \"../../Redux/profileReducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL : 'https://cards-nya-back.herokuapp.com/1.0/'\r\n\r\n});\r\n\r\n\r\ntype getProfileType = ProfileType & {error: string}\r\n\r\nexport const signInApi = {   \r\n         async signIn(email: string, password: string, rememberMe: boolean) {\r\n             return await instance.post<getProfileType>(`auth/login`, {email, password, rememberMe})\r\n          \r\n        }         \r\n}\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL : 'https://cards-nya-back.herokuapp.com/1.0/'\r\n \r\n});\r\n\r\n\r\nexport  const setToken = (token: string) => localStorage.setItem('token', token) \r\n\r\nexport  const getToken = () => localStorage.getItem('token') \r\n\r\n\r\nexport const profileApi = {   \r\n\r\n    async getProfile(token: string) {\r\n\r\n        let response = await instance.post(`auth/me`, {token})\r\n        return response.data\r\n    }\r\n}\r\n","import { profileApi, getToken } from \"../components/api/profileApi\";\r\n\r\nconst SET_PROFILE = 'profile/SET_PROFILE'\r\nconst SET_ERROR = 'profile/SET_ERROR'\r\n\r\nexport type ProfileType ={\r\n  email: '',\r\n  isAdmin: false,\r\n  name: '',\r\n  rememberMe: false,\r\n  token: '',\r\n  tokenDeathTime: number,\r\n  __v: 0,\r\n  _id: ''\r\n  success : boolean\r\n}\r\n\r\nconst initialState = {\r\n profile: {} as ProfileType ,\r\n  error : '',\r\n  token : ''\r\n\r\n\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action:actionType) =>{\r\n  switch (action.type) {\r\n    case SET_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n\r\n      }\r\n      case SET_ERROR:\r\n        return {\r\n          ...state,\r\n          error: action.error\r\n        } \r\n    default:\r\n      return state\r\n  }\r\n  \r\n}\r\n\r\ntype actionType = setProfileSuccessActionType |setErrorActionType\r\n\r\ntype setProfileSuccessActionType = {\r\n type : typeof  SET_PROFILE\r\n profile: {}\r\n}\r\ntype setErrorActionType = {\r\n  type: typeof SET_ERROR\r\n  error: string \r\n\r\n }\r\n\r\n\r\nexport const setProfileSuccess = (profile : {}) => ({type: SET_PROFILE, profile :profile })\r\nconst  setError = (error: string): setErrorActionType=>({type : SET_ERROR, error : error})\r\n\r\nexport const setProfile= () => async (dispatch:any)=>{\r\n \r\n  try {\r\n    debugger\r\n    let token = getToken()\r\n    token = '7c14aed0-b8f5-11ea-82a5-e1ef009c6bcd'\r\n    if(token) {\r\n      let response = await profileApi.getProfile(token)\r\n      if(response.data.success){\r\n        dispatch(setProfileSuccess(response.data))\r\n      }\r\n      else {\r\n        dispatch(setError(response.data.error))\r\n      }\r\n    } \r\n  } catch (error) {\r\n    debugger\r\n     dispatch(setError('Somethisg wrong'))\r\n  }\r\n}\r\n\r\n","import { signInApi } from \"../components/api/signInApi\";\r\nimport { setProfileSuccess } from \"./profileReducer\";\r\n\r\n\r\nconst IS_AUTH_SUCCESS = 'signIn/IS_AUTH_SUCCESS'\r\nconst SET_ERROR = 'signIn/SET_ERROR'\r\n\r\nconst initialState = {\r\n  isAuth: false,\r\n  error: ''\r\n\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const signInReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n  switch (action.type) {\r\n    case IS_AUTH_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isAuth: action.isAuth\r\n      }\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error\r\n      }\r\n    default: return state\r\n  }\r\n}\r\n\r\ntype ActionType = setAuthSuccessActionType | setErrorActionType\r\n\r\ntype setAuthSuccessActionType = {\r\n  type: typeof IS_AUTH_SUCCESS\r\n  isAuth: boolean\r\n  error: string\r\n}\r\ntype setErrorActionType = {\r\n  type: typeof SET_ERROR\r\n  error: string\r\n  isAuth: boolean\r\n}\r\n\r\n\r\nconst setAuthSuccess = (): setAuthSuccessActionType => ({ type: IS_AUTH_SUCCESS, error: '', isAuth: true })\r\nexport const setError = (error: string): setErrorActionType => ({ type: SET_ERROR, error: error, isAuth: false })\r\nexport const signInSuccess = (email: string, password: string, rememberMe: boolean) => async (dispatch: any) => {\r\n\r\n  try {\r\n    let response = await signInApi.signIn(email, password, rememberMe)\r\n    dispatch(setAuthSuccess())\r\n    dispatch(setProfileSuccess(response))\r\n  } catch (error) {\r\n    if (error.response) {\r\n      dispatch(setError(error.response.data.error))\r\n    } else {\r\n      dispatch(setError('Some ERROR'))\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport style from './errorMessage.module.css'\r\n\r\ntype ErrorMessagePropsType = {\r\n    message?: string\r\n}\r\n\r\n\r\nconst ErrorMessage: React.FC<ErrorMessagePropsType> = (props) => {\r\n\r\n    const { message } = props\r\n    return <>\r\n        <p className={style.error}>{message}</p>\r\n    </>\r\n}\r\n\r\nexport default ErrorMessage","import React, { useState, useCallback } from 'react'\r\nimport SignIn from './SignIn'\r\nimport style from './signIn.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { signInSuccess } from '../../../Redux/signInReducer'\r\nimport { AppStateType } from '../../../Redux/store'\r\nimport ErrorMessage from '../../common/ErrorMessage/ErrorMessage'\r\n\r\n\r\n\r\ntype SignInContainerPropsType = {\r\n\r\n}\r\n\r\nconst SignInContainer: React.FC<SignInContainerPropsType> = () => {\r\n\r\n    const authorisationError = useSelector((store: AppStateType) => store.signInPage.error)\r\n\r\n    const [email, setEmailValue] = useState<string>('')\r\n    const [password, setPasswordValue] = useState<string>('')\r\n    const [rememberMe, setRememberMeValue] = useState<boolean>(false)\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const dispatch = useDispatch();\r\n    const signIn = useCallback(\r\n        () => {\r\n            if (email && password) {\r\n                dispatch(signInSuccess(email, password, rememberMe))\r\n                setEmailValue('')\r\n                setPasswordValue('')\r\n                setRememberMeValue(false)\r\n            } else {\r\n                setError('all fields must be filled')\r\n                return\r\n            }\r\n        },\r\n        [email, password, rememberMe, dispatch]\r\n    );\r\n\r\n\r\n    const setEmail = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEmailValue(e.currentTarget.value)\r\n        setError('')\r\n\r\n    }, [setEmailValue, setError]);\r\n    const setPassword = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPasswordValue(e.currentTarget.value)\r\n        setError('')\r\n    }, [setPasswordValue, setError]);\r\n    const setRememberMe = useCallback((e: React.ChangeEvent<HTMLInputElement>) => setRememberMeValue(e.currentTarget.checked), [setRememberMeValue]);\r\n\r\n    return <div className={style.wraper}>\r\n        <h2>SIGN IN</h2>\r\n        {authorisationError && <ErrorMessage message={authorisationError} />}\r\n        <SignIn email={email}\r\n            password={password}\r\n            rememberMe={rememberMe}\r\n            error={error}\r\n            setEmail={setEmail}\r\n            setPassword={setPassword}\r\n            setRememberMe={setRememberMe}\r\n            signIn={signIn} />\r\n    </div>\r\n}\r\n\r\nexport default SignInContainer","import React from 'react'\r\nimport SignInContainer from './SignIn/SignInContainer'\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Redux/store';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { PROFILE_PATH } from '../Routes/Routes';\r\n\r\n\r\n\r\ntype SignInPageType = {\r\n\r\n}\r\n\r\nconst SignInPage : React.FC<SignInPageType>=()=>{\r\n\r\n    const isAuth = useSelector((store: AppStateType) => store.signInPage.isAuth);\r\n\r\n \r\n    return <>\r\n      {isAuth && <Redirect to={PROFILE_PATH} />}  \r\n        <SignInContainer/>\r\n        </>\r\n}\r\n\r\nexport default SignInPage","import React from 'react'\r\n\r\n\r\ntype ProfilePropsType = {\r\n\r\n}\r\n\r\nconst Profile :React.FC<ProfilePropsType> =()=>{\r\n    return <div>\r\n        Profile\r\n    </div>\r\n}\r\n\r\nexport default Profile","import React, { useEffect } from 'react'\r\nimport Profile from './Profile'\r\nimport { useDispatch } from 'react-redux';\r\nimport { setProfile } from '../../../Redux/profileReducer';\r\n\r\ntype ProfileContainerPropsType = {\r\n\r\n}\r\n\r\nconst ProfileContainer: React.FC<ProfileContainerPropsType> = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    debugger\r\n    useEffect(() => {\r\n        dispatch(setProfile())\r\n    }, [])\r\n\r\n    return <div><Profile /></div>\r\n}\r\n\r\nexport default ProfileContainer","import React from 'react'\r\nimport ProfileContainer from './Profile/ProfileContainer'\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Redux/store';\r\n\r\n\r\ntype ProfilePagePropsType = {\r\n\r\n}\r\n\r\nconst ProfilePage :React.FC<ProfilePagePropsType> =()=>{\r\n\r\n  const isAuth = useSelector((store: AppStateType) => store.signInPage.isAuth);\r\n    return <div>\r\n      <ProfileContainer/>\r\n    </div>\r\n}\r\n\r\nexport default ProfilePage","import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport RegistrationContainer from '../RegistrationPage/Registration/RegistrationContainer'\r\nimport SetNewPasswordContainer from '../SetNewPasswordPage/SetNewPasswordContainer'\r\nimport ForgotPasswordPage from '../ForgotPasswordPage/ForgotPasswordPage'\r\nimport SignInPage from '../SignInPage/SignInPage'\r\nimport ProfilePage from '../ProfilePage/ProfilePage'\r\n\r\n\r\nexport const SIGN_IN_PATH = '/sign-in';\r\nexport const REGISTER_PATH = '/registration';\r\nexport const FORGOT_PASSWORD_PATH = '/forgot-password';\r\nexport const SET_NEW_PASSWORD_PATH = '/set-new-password'; \r\nexport const PROFILE_PATH = '/profile'; \r\n\r\n\r\nconst Routes:React.FC = () =>{\r\n    return <>\r\n      <Route path={SIGN_IN_PATH} component={SignInPage} />\r\n        <Route path={REGISTER_PATH} component={RegistrationContainer} />\r\n        <Route path = {FORGOT_PASSWORD_PATH} component = {ForgotPasswordPage}/>\r\n        <Route path = {SET_NEW_PASSWORD_PATH } component = {SetNewPasswordContainer}/>\r\n        <Route path = {PROFILE_PATH} component = {ProfilePage}/>\r\n    </>\r\n\r\n}\r\n\r\n\r\nexport default Routes\r\n","\r\nimport React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport style from './header.module.css'\r\nimport { SIGN_IN_PATH, REGISTER_PATH, FORGOT_PASSWORD_PATH, SET_NEW_PASSWORD_PATH, PROFILE_PATH } from '../Routes/Routes'\r\n\r\n\r\n\r\ntype HeaderPropsType = {\r\n\r\n}\r\n\r\n const Header:React.FC<HeaderPropsType> = () =>{\r\n\r\n    return <div className={style.header}>\r\n        <NavLink className={style.link} to={SIGN_IN_PATH}>SIGN IN</NavLink>\r\n        <NavLink className={style.link} to={REGISTER_PATH}>REGISTRATION</NavLink>\r\n        <NavLink className={style.link} to = {FORGOT_PASSWORD_PATH}>FORGOT PASSWORD</NavLink>\r\n        <NavLink className={style.link} to = {SET_NEW_PASSWORD_PATH}>SET NEW PASSWORD</NavLink>\r\n        <NavLink className={style.link} to = {PROFILE_PATH}> PROFILE</NavLink>\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default Header","import React from 'react';\r\nimport Header from './Header'\r\nimport style from './header.module.css'\r\n interface IHeaderContainerProps {\r\n\r\n }\r\n\r\nconst HeaderContainer:React.FC<IHeaderContainerProps>= ()=>{\r\n  return <div className = {style.wraper}>\r\n      <Header/>\r\n  </div>\r\n}\r\n\r\nexport default HeaderContainer;","import React from 'react'\r\nimport style from './main.module.css'\r\nimport Routes from '../Routes/Routes'\r\n\r\n\r\n\r\n\r\n const Main:React.FC = () =>{\r\n\r\n    return <div className={style.main}>\r\n     <Routes/>\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default Main","\r\nconst initialState = {\r\n   \r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const forgotPasswordReducer = (state = initialState, action:any) =>{\r\n  return state\r\n}\r\n\r\n\r\n","const initialState = {\r\n   \r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const registrationReducer = (state = initialState, action:any) =>{\r\n  return state\r\n}\r\n\r\n","const initialState = {\r\n   \r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const setNewPasswordReducer = (state = initialState, action:any) =>{\r\n  return state\r\n}\r\n\r\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { profileReducer } from \"./profileReducer\";\r\nimport { forgotPasswordReducer } from \"./forgotPasswordReducer\";\r\nimport { registrationReducer } from \"./registrationReducer\";\r\nimport { setNewPasswordReducer } from \"./setNewPasswordReducer\";\r\nimport { signInReducer } from \"./signInReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    forgotPasswordPage: forgotPasswordReducer,\r\n    registrationPage: registrationReducer,\r\n    setNewPasswordPage: setNewPasswordReducer,\r\n    signInPage: signInReducer\r\n    \r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport './App.css';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport Main from './components/Main/Main';\r\nimport { Provider } from 'react-redux';\r\nimport store from './Redux/store';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n      <div className=\"App\">\r\n        <HeaderContainer />\r\n        <Main />\r\n      </div>    \r\n                </Provider>\r\n      \r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}